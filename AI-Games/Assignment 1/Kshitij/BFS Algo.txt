#include<iostream>
#include<vector>
#include<queue>
#include<bits/stdc++.h>

using namespace std;



int main()
{
    int v,e;
    cout<<"Enter the number of vertices"<<endl;
    cin>>v;                     //Taking input for number of vertices
    cout<<"Now, enter the number of edges"<<endl;
    cin>>e;                     //Taking input for number of edges

    int a,b;                    //Declaring two variables for storing the order of edges
    
    vector <int> graph[v];      //Declaring a vector for storing graph in the form of an adjacency matrix
    
    int level[100];             //Declaring a vector for stroring levels of the vertices of the graph
        
    bool visited[100];          //Declaring a vector for storing the state of vertex whether it is visited or not
    
    for (int i=0; i<e; ++i)
    {
        cin>>a>>b;
        graph[a].push_back(b);
        graph[b].push_back(a);  //Since the graph is a undirected graph
    }
    
    int source;                 //Declaring the node from where the search has to be started
    cout<<"enter the source node"<<endl;
    cin>>source;
    
    queue <int> q;              //Declaring a queue for storing the vertices as we traverse through the graph
    
    q.push(source);
    level[source]=0;            //The level of source node would be 0
    
    visited[source]=true;
    
    while(!q.empty())
    {
        int p=q.front();        
        cout<<p<<"-->";
        q.pop();
        for (int i=0; i<graph[p].size(); ++i)
        {
            if(visited[graph[p][i]]==false)
            {
                level[graph[p][i]]=level[p]+1;
                q.push(graph[p][i]);
                visited[graph[p][i]]=true;
            }
        }
        
    }
    
        
}