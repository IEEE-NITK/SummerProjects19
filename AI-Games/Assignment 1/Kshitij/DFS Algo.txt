#include<iostream>
#include<vector>
#include<bits/stdc++.h>

using namespace std;

int DFS(vector<int> graph[], int source, int v, bool visited[])
{
    if (visited[source]==false)
    {
        cout<<source<<"-->";
        visited[source]=true;
        for (int i=0; i<graph[source].size(); ++i)
        {
            if (visited[graph[source][i]]==false)
            {
                DFS(graph, graph[source][i], v, visited);
            }
        }
    }
    
}

int main()
{
    int v,e;
    cout<<"Enter the number of vertices"<<endl;
    cin>>v;                 //Taking input for number of vertices
    cout<<"Now, enter the number of edges"<<endl;
    cin>>e;                 //Taking input for number of edges

    int a,b;                //Declaring two variables for storing the order of edges
    
    vector <int> graph[v];  //Declaring a vector for storing graph in the form of an adjacency matrix
    
    for (int i=0; i<e; ++i)
    {
        cin>>a>>b;
        graph[a].push_back(b);
        graph[b].push_back(a);//Since the graph is a undirected graph
    }
    
    int source;             //Declaring the node from where the search has to be started
    cout<<"enter the source node"<<endl;
    cin>>source;
    
    bool visited[v];        //Declaring an array of booltype for storing if the vertex has been visited or not_eq
    
    for (int i=0; i<v;++i)  //Setting each vertex as unvisited
    {
        visited[i]=false;
    }
    
    DFS(graph, source, v, visited);
}