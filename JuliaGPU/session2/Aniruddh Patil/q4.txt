Scenario I:

Output:
julia> A=[[2 1];[4 3];[6 5]]
3×2 Array{Int64,2}:
 2  1
 4  3
 6  5

julia> sqrt.(A)
3×2 Array{Float64,2}:
 1.41421  1.0
 2.0      1.73205
 2.44949  2.23607

julia> sort.(A)
ERROR: MethodError: no method matching sort(::Int64)
Closest candidates are:
  sort(::AbstractUnitRange) at range.jl:961
  sort(::AbstractRange) at range.jl:964
  sort(::SparseArrays.SparseVector{Tv,Ti}; kws...) where {Tv, Ti} at C:\cygwin\home\Administrator\buildbot\worker\package_win64\build\usr\share\julia\stdlib\v1.1\SparseArrays\src\sparsevector.jl:1861
  ...
Stacktrace:
 [1] _broadcast_getindex_evalf at .\broadcast.jl:578 [inlined]
 [2] _broadcast_getindex at .\broadcast.jl:551 [inlined]
 [3] getindex at .\broadcast.jl:511 [inlined]
 [4] copy at .\broadcast.jl:787 [inlined]
 [5] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,typeof(sort),Tuple{Array{Int64,2}}}) at .\broadcast.jl:753
 [6] top-level scope at none:0

Reasoning:
Square Root function is broadcasted since it is a 3X2 Array with each element having its own individuality.Hence,the square root function reads each Int64/Float64 value and returns the output.
On the other hand,the Sort function does not compute since it expects Arrays/Vectors as input,but here the individual elements are numeric constants.




Scenario II:

Output:
julia> A=[[2,1],[4,3],[6,5]]
3-element Array{Array{Int64,1},1}:
 [2, 1]
 [4, 3]
 [6, 5]

julia> sqrt.(A)
ERROR: MethodError: no method matching sqrt(::Array{Int64,1})
Closest candidates are:
  sqrt(::Float16) at math.jl:1018
  sqrt(::Complex{Float16}) at math.jl:1019
  sqrt(::Missing) at math.jl:1070
  ...
Stacktrace:
 [1] _broadcast_getindex_evalf at .\broadcast.jl:578 [inlined]
 [2] _broadcast_getindex at .\broadcast.jl:551 [inlined]
 [3] getindex at .\broadcast.jl:511 [inlined]
 [4] copy at .\broadcast.jl:787 [inlined]
 [5] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(sqrt),Tuple{Array{Array{Int64,1},1}}}) at .\broadcast.jl:753
 [6] top-level scope at none:0

julia> sort.(A)
3-element Array{Array{Int64,1},1}:
 [1, 2]
 [3, 4]
 [5, 6]
 
Reasoning:

Square Root is trying to be broadcasted over a data set that doesn't match the input arguments for the Square Root function,since the individual "elements" in this array are couplets.
On the other hand Sort is broadcasted since it operates on a Vector, or an Array,since here we have an Array of Arrays.




Conclusion:

Broadcasting functions must be done while bearing in mind the requirement of the standalone function.
Moreover,functions to be broadcasted should have a definitive meaning in the given context,since we're trying to understand its behaviour on a collection of various elements with different types and structures.
